{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Documents\\\\Desktop\\\\sentiment-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [text, setText] = useState('');\n  const [sentiment, setSentiment] = useState('');\n  const [polarity, setPolarity] = useState(null);\n  const handleTextChange = e => {\n    setText(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Call Flask API for sentiment analysis\n    const response = await fetch('http://15.206.167.230:5000/sentiment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    // If the API responds with a sentiment, set the state\n    if (data.sentiment) {\n      setSentiment(data.sentiment);\n      setPolarity(data.polarity); // Save polarity score\n    } else {\n      setSentiment('Error analyzing sentiment');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Sentiment Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: text,\n          onChange: handleTextChange,\n          placeholder: \"Enter text for analysis\",\n          className: \"textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Analyze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), sentiment && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"result-sentiment\",\n          children: [\"Sentiment: \", sentiment]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), polarity !== null && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"result-polarity\",\n          children: [\"Polarity: \", polarity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fkGyXxxBco6rytwrtMaKhdO55AM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","text","setText","sentiment","setSentiment","polarity","setPolarity","handleTextChange","e","target","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Documents/Desktop/sentiment-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [text, setText] = useState('');\n  const [sentiment, setSentiment] = useState('');\n  const [polarity, setPolarity] = useState(null);\n\n  const handleTextChange = (e) => {\n    setText(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Call Flask API for sentiment analysis\n    const response = await fetch('http://15.206.167.230:5000/sentiment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ text }),\n    });\n\n    const data = await response.json();\n\n    // If the API responds with a sentiment, set the state\n    if (data.sentiment) {\n      setSentiment(data.sentiment);\n      setPolarity(data.polarity);  // Save polarity score\n    } else {\n      setSentiment('Error analyzing sentiment');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"title\">Sentiment Analysis</h1>\n        <form onSubmit={handleSubmit} className=\"form\">\n          <textarea\n            value={text}\n            onChange={handleTextChange}\n            placeholder=\"Enter text for analysis\"\n            className=\"textarea\"\n          />\n          <button type=\"submit\" className=\"submit-btn\">Analyze</button>\n        </form>\n        {sentiment && (\n          <div className=\"result\">\n            <h2 className=\"result-sentiment\">Sentiment: {sentiment}</h2>\n            {polarity !== null && <p className=\"result-polarity\">Polarity: {polarity}</p>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}